import streamlit as st
import bcrypt
import json
import os

USER_DB = "users.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def load_users():
    if not os.path.exists(USER_DB):
        return {}
    with open(USER_DB, "r") as f:
        return json.load(f)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def save_users(users):
    with open(USER_DB, "w") as f:
        json.dump(users, f)

# –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
def hash_password(raw_password):
    hashed = bcrypt.hashpw(raw_password.encode("utf-8"), bcrypt.gensalt())
    return hashed.decode("utf-8")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—é
def verify_password(raw_password, hashed_password):
    return bcrypt.checkpw(raw_password.encode("utf-8"), hashed_password.encode("utf-8"))

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
def register_user(username, password):
    users = load_users()
    if username in users:
        return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!"
    users[username] = hash_password(password)
    save_users(users)
    return True, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!"

# –í—Ö—ñ–¥
def login_user(username, password):
    users = load_users()
    if username not in users:
        return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    if verify_password(password, users[username]):
        return True, "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!"
    else:
        return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å."

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è GUI
def main():
    st.set_page_config(page_title="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è", page_icon="üîê")
    st.title("üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")

    menu = ["–í—Ö—ñ–¥", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"]
    choice = st.sidebar.selectbox("–ú–µ–Ω—é", menu)

    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False
        st.session_state.username = ""

    if choice == "–í—Ö—ñ–¥":
        st.subheader("–£–≤—ñ–π—Ç–∏")
        username = st.text_input("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.button("–£–≤—ñ–π—Ç–∏"):
            success, msg = login_user(username, password)
            st.info(msg)
            if success:
                st.session_state.logged_in = True
                st.session_state.username = username

    elif choice == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è":
        st.subheader("–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å")
        new_user = st.text_input("–ù–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        new_password = st.text_input("–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å", type="password")
        if st.button("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"):
            success, msg = register_user(new_user, new_password)
            st.info(msg)

    if st.session_state.logged_in:
        st.success(f"üëã –ü—Ä–∏–≤—ñ—Ç, {st.session_state.username}!")
        if st.button("–í–∏–π—Ç–∏"):
            st.session_state.logged_in = False
            st.session_state.username = ""

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
